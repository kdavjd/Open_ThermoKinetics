"""
Image Renderer - –†–µ–Ω–¥–µ—Ä–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
"""

from pathlib import Path
from typing import Any, Dict, List

from PyQt6.QtCore import QSize, Qt
from PyQt6.QtGui import QMovie, QPixmap
from PyQt6.QtWidgets import QHBoxLayout, QLabel, QPushButton, QVBoxLayout, QWidget

from src.core.logger_config import LoggerManager
from src.gui.user_guide_tab.user_guide_framework.rendering.renderers.base_renderer import BaseRenderer

# Initialize logger for this module
logger = LoggerManager.get_logger(__name__)


class ImageRenderer(BaseRenderer):
    """
    –†–µ–Ω–¥–µ—Ä–µ—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, GIF –∞–Ω–∏–º–∞—Ü–∏–π –∏ –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    """

    def get_supported_types(self) -> List[str]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–∏–ø–æ–≤ –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
        return ["image", "gif", "video", "gallery", "diagram"]

    def render(self, content: Dict[str, Any]) -> QWidget:
        """
        –†–µ–Ω–¥–µ—Ä–∏—Ç –º–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –≤–∏–¥–∂–µ—Ç.

        Args:
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å —Ç–∏–ø–æ–º –∏ –¥–∞–Ω–Ω—ã–º–∏

        Returns:
            QWidget: –°–æ–∑–¥–∞–Ω–Ω—ã–π –º–µ–¥–∏–∞ –≤–∏–¥–∂–µ—Ç
        """
        content_type = content.get("type")
        content_data = content.get("content", {})

        if content_type == "image":
            return self._render_image(content_data)
        elif content_type == "gif":
            return self._render_gif(content_data)
        elif content_type == "video":
            return self._render_video_placeholder(content_data)
        elif content_type == "gallery":
            return self._render_gallery(content_data)
        elif content_type == "diagram":
            return self._render_diagram(content_data)
        else:
            return self._render_placeholder(f"Unsupported media type: {content_type}")

    def _render_image(self, image_data: Dict[str, Any]) -> QWidget:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

        Args:
            image_data: –î–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (path, caption, width, height)

        Returns:
            QWidget: –í–∏–¥–∂–µ—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        """
        container = QWidget()
        layout = QVBoxLayout(container)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_path = image_data.get("path", "")
        caption = image_data.get("caption", "")
        max_width = image_data.get("max_width", 500)
        max_height = image_data.get("max_height", 400)

        image_label = QLabel()
        image_label.setAlignment(Qt.AlignmentFlag.AlignCenter)

        if image_path and Path(image_path).exists():
            pixmap = QPixmap(image_path)
            if not pixmap.isNull():
                # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
                scaled_pixmap = pixmap.scaled(
                    QSize(max_width, max_height),
                    Qt.AspectRatioMode.KeepAspectRatio,
                    Qt.TransformationMode.SmoothTransformation,
                )
                image_label.setPixmap(scaled_pixmap)
            else:
                image_label.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        else:
            image_label.setText("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_label.setStyleSheet(f"""
            QLabel {{
                border: 1px solid {self.get_theme_color("border")};
                border-radius: 4px;
                padding: 4px;
                background-color: {self.get_theme_color("surface")};
                margin: 8px 0px;
            }}
        """)

        layout.addWidget(image_label)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å
        if caption:
            caption_label = QLabel(caption)
            caption_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            caption_label.setWordWrap(True)

            font = self.get_theme_font("body")
            if font:
                font.setItalic(True)
                caption_label.setFont(font)

            caption_label.setStyleSheet(f"""
                QLabel {{
                    color: {self.get_theme_color("text_secondary")};
                    font-style: italic;
                    padding: 4px 8px;
                    margin-bottom: 8px;
                }}
            """)

            layout.addWidget(caption_label)

        return container

    def _render_gif(self, gif_data: Dict[str, Any]) -> QWidget:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ GIF.

        Args:
            gif_data: –î–∞–Ω–Ω—ã–µ GIF –∞–Ω–∏–º–∞—Ü–∏–∏

        Returns:
            QWidget: –í–∏–¥–∂–µ—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        """
        container = QWidget()
        layout = QVBoxLayout(container)

        gif_path = gif_data.get("path", "")
        caption = gif_data.get("caption", "")
        auto_play = gif_data.get("auto_play", True)

        gif_label = QLabel()
        gif_label.setAlignment(Qt.AlignmentFlag.AlignCenter)

        if gif_path and Path(gif_path).exists():
            movie = QMovie(gif_path)
            if movie.isValid():
                gif_label.setMovie(movie)
                if auto_play:
                    movie.start()

                # –ö–æ–Ω—Ç—Ä–æ–ª—ã –¥–ª—è GIF
                controls_layout = QHBoxLayout()

                play_button = QPushButton("‚ñ∂Ô∏è Play")
                pause_button = QPushButton("‚è∏Ô∏è Pause")
                stop_button = QPushButton("‚èπÔ∏è Stop")

                play_button.clicked.connect(movie.start)
                pause_button.clicked.connect(movie.setPaused)
                stop_button.clicked.connect(movie.stop)

                controls_layout.addWidget(play_button)
                controls_layout.addWidget(pause_button)
                controls_layout.addWidget(stop_button)

                layout.addWidget(gif_label)
                layout.addLayout(controls_layout)
            else:
                gif_label.setText("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å GIF –∞–Ω–∏–º–∞—Ü–∏—é")
                layout.addWidget(gif_label)
        else:
            gif_label.setText("‚ùå GIF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            layout.addWidget(gif_label)

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
        if caption:
            caption_label = QLabel(caption)
            caption_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            caption_label.setWordWrap(True)
            layout.addWidget(caption_label)

        return container

    def _render_video_placeholder(self, video_data: Dict[str, Any]) -> QWidget:
        """
        –°–æ–∑–¥–∞–µ—Ç placeholder –¥–ª—è –≤–∏–¥–µ–æ (–ø–æ–∫–∞ –±–µ–∑ –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤–∏–¥–µ–æ).

        Args:
            video_data: –î–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ

        Returns:
            QWidget: Placeholder –≤–∏–¥–∂–µ—Ç
        """
        container = QWidget()
        layout = QVBoxLayout(container)

        title = video_data.get("title", "–í–∏–¥–µ–æ")
        description = video_data.get("description", "")

        # Placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        placeholder = QLabel("üé• –í–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç\n(–ë—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)")
        placeholder.setAlignment(Qt.AlignmentFlag.AlignCenter)
        placeholder.setStyleSheet(f"""
            QLabel {{
                border: 2px dashed {self.get_theme_color("border")};
                border-radius: 8px;
                padding: 40px;
                background-color: {self.get_theme_color("surface")};
                color: {self.get_theme_color("text_secondary")};
                font-size: 14px;
            }}
        """)

        layout.addWidget(QLabel(f"<b>{title}</b>"))
        layout.addWidget(placeholder)

        if description:
            desc_label = QLabel(description)
            desc_label.setWordWrap(True)
            layout.addWidget(desc_label)

        return container

    def _render_gallery(self, gallery_data: Dict[str, Any]) -> QWidget:
        """
        –°–æ–∑–¥–∞–µ—Ç –≥–∞–ª–µ—Ä–µ—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.

        Args:
            gallery_data: –î–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏

        Returns:
            QWidget: –í–∏–¥–∂–µ—Ç –≥–∞–ª–µ—Ä–µ–∏
        """
        container = QWidget()
        layout = QVBoxLayout(container)

        title = gallery_data.get("title", "")
        images = gallery_data.get("images", [])

        if title:
            title_label = QLabel(f"<b>{title}</b>")
            layout.addWidget(title_label)

        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        images_layout = QHBoxLayout()

        for image_info in images[:4]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 4 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            image_widget = self._render_image(image_info)
            image_widget.setMaximumWidth(150)
            images_layout.addWidget(image_widget)

        if len(images) > 4:
            more_label = QLabel(f"... –∏ –µ—â–µ {len(images) - 4} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
            more_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
            images_layout.addWidget(more_label)

        layout.addLayout(images_layout)
        return container

    def _render_diagram(self, diagram_data: Dict[str, Any]) -> QWidget:
        """
        –°–æ–∑–¥–∞–µ—Ç –≤–∏–¥–∂–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã –∏–ª–∏ —Å—Ö–µ–º—ã.

        Args:
            diagram_data: –î–∞–Ω–Ω—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã

        Returns:
            QWidget: –í–∏–¥–∂–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—ã
        """
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–Ω–¥–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return self._render_image(diagram_data)

    def _render_placeholder(self, message: str) -> QWidget:
        """
        –°–æ–∑–¥–∞–µ—Ç placeholder –≤–∏–¥–∂–µ—Ç —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

        Returns:
            QWidget: Placeholder –≤–∏–¥–∂–µ—Ç
        """
        placeholder = QLabel(message)
        placeholder.setAlignment(Qt.AlignmentFlag.AlignCenter)
        placeholder.setStyleSheet(f"""
            QLabel {{
                border: 1px solid {self.get_theme_color("border")};
                border-radius: 4px;
                padding: 20px;
                background-color: {self.get_theme_color("surface")};
                color: {self.get_theme_color("text_secondary")};
            }}
        """)
        return placeholder
